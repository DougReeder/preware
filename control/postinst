#!/bin/sh                                                                                       

PID="org.webosinternals.preware"
SID="org.webosinternals.ipkgservice"

# Handle execution as pmPostInstall.script
#if [ -z "$IPKG_OFFLINE_ROOT" ]; then
#  IPKG_OFFLINE_ROOT=/media/cryptofs/apps
#  mount -o remount,rw /
#fi

APPS=/media/cryptofs/apps

# no longer in palm-build-info & only needed for patches feeds
#VERSION=`grep PRODUCT_VERSION_STRING /etc/palm-build-info | sed -e 's/.* webOS \([0-9.]*\).*/\1/'`

# Remove the obsolete Package Manager Service
#if [ -f $APPS/usr/lib/ipkg/info/org.webosinternals.ipkgservice.prerm ] ; then
#  IPKG_OFFLINE_ROOT=$APPS sh $APPS/usr/lib/ipkg/info/org.webosinternals.ipkgservice.prerm || true
#fi
#/usr/bin/ipkg -o $APPS -force-depends remove org.webosinternals.ipkgservice || true

# Remove the ipkgservice executable
#rm -f /var/usr/sbin/${SID}

# Remove the dbus service
#rm -f /usr/share/dbus-1/system-services/${SID}.service /var/palm/system-services/${SID}.service

# Remove the ls2 roles
#rm -f /usr/share/ls2/roles/prv/${SID}.json /var/palm/ls2/roles/prv/${SID}.json
#rm -f /usr/share/ls2/roles/pub/${SID}.json /var/palm/ls2/roles/pub/${SID}.json

# Stop the service if running
#/sbin/stop ${SID} || true
#/usr/bin/killall -9 ${SID} || true

# Remove the upstart script
#rm -f /etc/event.d/${SID} /var/palm/event.d/${SID}

# Install the ipkgservice executable
#mkdir -p /var/usr/sbin/
#install -m 755 $APPS/usr/palm/applications/${PID}/bin/${SID} /var/usr/sbin/${SID}

# Install the dbus service
#mkdir -p /var/palm/system-services
#cp $APPS/usr/palm/applications/${PID}/dbus/${SID}.service /var/palm/system-services/${SID}.service

# Install the ls2 roles
#mkdir -p /var/palm/ls2/roles/prv /var/palm/ls2/roles/pub
#cp $APPS/usr/palm/applications/${PID}/dbus/${SID}.json /var/palm/ls2/roles/prv/${SID}.json
#cp $APPS/usr/palm/applications/${PID}/dbus/${SID}.json /var/palm/ls2/roles/pub/${SID}.json
#/usr/bin/ls-control scan-services || true

# Install the upstart script
#mkdir -p /var/palm/event.d
#cp $APPS/usr/palm/applications/${PID}/upstart/${SID} /var/palm/event.d/${SID}

# Start the service
#/sbin/start ${SID}

# Create the ipkg config and database areas
mkdir -p $APPS/etc/opkg
#mkdir -p $APPS/usr/lib/ipkg/cache
# TODO: change to $APPS/usr/lib/opkg/cache everywhere in app & service

# Remove all list database cache files
#rm -f $APPS/usr/lib/ipkg/lists/*
# TODO: change to $APPS/usr/lib/opkg/lists/ everywhere in app & service

# Set up the architecture configuration file
rm -f $APPS/etc/opkg/arch.conf
cp /etc/opkg/arch.conf $APPS/etc/opkg/arch.conf


# Install webosports all-arch feeds
echo "src/gz webosports http://feeds.webos-ports.org/webos-ports/all" > $APPS/etc/opkg/webos-ports.conf


# Install optware feeds
echo "src/gz optware http://ipkg.preware.net/feeds/optware/all" > $APPS/etc/opkg/optware.conf.new
echo "src/gz optware-`/bin/uname -m` http://ipkg.preware.net/feeds/optware/`/bin/uname -m`" >> $APPS/etc/opkg/optware.conf.new
sed -i -e 's|armv7l|armv7|g' $APPS/etc/opkg/optware.conf.new
sed -i -e 's|armv6l|armv6|g' $APPS/etc/opkg/optware.conf.new

# Install prethemer feed
echo "src/gz prethemer http://www.prethemer.com/feeds/preware/themes" > $APPS/etc/opkg/prethemer.conf.new

# Install clock-themes feed
#echo "src/gz clock-themes http://webos-clock-themer.googlecode.com/svn/trunk/WebOS%20Clock%20Theme%20Builder/feed" > $APPS/etc/opkg/clock-themes.conf.new

# Install webosinternals feeds
echo "src/gz webosinternals http://ipkg.preware.net/feeds/webos-internals/all" > $APPS/etc/opkg/webos-internals.conf.new
echo "src/gz webosinternals-`/bin/uname -m` http://ipkg.preware.net/feeds/webos-internals/`/bin/uname -m`" >> $APPS/etc/opkg/webos-internals.conf.new
sed -i -e 's|armv7l|armv7|g' $APPS/etc/opkg/webos-internals.conf.new
sed -i -e 's|armv6l|armv6|g' $APPS/etc/opkg/webos-internals.conf.new

# Install webos-patches feed
echo "src/gz webos-patches http://ipkg.preware.net/feeds/webos-patches/${VERSION:-unknown}" > $APPS/etc/opkg/webos-patches.conf.new

# Install webos-kernels feed
#echo "src/gz webos-kernels http://ipkg.preware.net/feeds/webos-kernels/${VERSION:-unknown}" > $APPS/etc/opkg/webos-kernels.conf.new

# Install woce feed
echo "src/gz woce http://ipkg.preware.net/feeds/woce" > $APPS/etc/opkg/woce.conf.new


# Install Macaw 2 (LuneOS-compatible) feed
echo "src Macaw-enyo http://minego.net/preware/macaw-enyo" > $APPS/etc/opkg/macaw-enyo.conf.new

# Install Hominid Software feed
echo "src Hominid-Software http://hominidsoftware.com/preware" > $APPS/etc/opkg/hominid-software.conf.new

# Install FeedSpider2 feed
echo "src/gz FeedSpider2 http://feedspider.net/luneos" > $APPS/etc/opkg/feedspider.conf.new

# Install PivotCE feed and enable it
echo "src/gz PivotCE http://feed.pivotce.com" > $APPS/etc/opkg/pivotce.conf


# Install the alpha testing feeds (disabled by default)

if [ -f /var/preferences/org.webosinternals.preware/enable-alpha-feeds ] ; then

  # Install alpha optware feeds
  echo "src/gz alpha-optware http://ipkg.preware.net/alpha/optware/all" > $APPS/etc/opkg/alpha-optware.conf.new
  echo "src/gz alpha-optware-`/bin/uname -m` http://ipkg.preware.net/alpha/optware/`/bin/uname -m`" >> $APPS/etc/opkg/alpha-optware.conf.new
  sed -i -e 's|armv7l|armv7|g' $APPS/etc/opkg/alpha-optware.conf.new
  sed -i -e 's|armv6l|armv6|g' $APPS/etc/opkg/alpha-optware.conf.new

  # Install alpha apps feeds
  echo "src/gz alpha-apps http://ipkg.preware.net/alpha/apps/all" > $APPS/etc/opkg/alpha-apps.conf.new
  echo "src/gz alpha-apps-`/bin/uname -m` http://ipkg.preware.net/alpha/apps/`/bin/uname -m`" >> $APPS/etc/opkg/alpha-apps.conf.new
  sed -i -e 's|armv7l|armv7|g' $APPS/etc/opkg/alpha-apps.conf.new
  sed -i -e 's|armv6l|armv6|g' $APPS/etc/opkg/alpha-apps.conf.new

  # Install alpha patches feed
  echo "src/gz alpha-patches http://ipkg.preware.net/alpha/patches/${VERSION:-unknown}" > $APPS/etc/opkg/alpha-patches.conf.new

  # Install alpha kernels feed
  #echo "src/gz alpha-kernels http://ipkg.preware.net/alpha/kernels/${VERSION:-unknown}" > $APPS/etc/opkg/alpha-kernels.conf.new

  # Install alpha woce feed
  echo "src/gz alpha-woce http://ipkg.preware.net/alpha/woce" > $APPS/etc/opkg/alpha-woce.conf.new

  # Remove the obsolete testing feeds
  rm -f $APPS/etc/opkg/webos-testing*.conf*
  rm -f $APPS/etc/opkg/optware-testing*.conf*
  rm -f $APPS/etc/opkg/webos-*-testing*.conf*

fi

# Install the beta testing feeds (disabled by default)

if [ -f /var/preferences/org.webosinternals.preware/enable-beta-feeds ] ; then

  # Install beta optware feeds
  echo "src/gz beta-optware http://ipkg.preware.net/beta/optware/all" > $APPS/etc/opkg/beta-optware.conf.new
  echo "src/gz beta-optware-`/bin/uname -m` http://ipkg.preware.net/beta/optware/`/bin/uname -m`" >> $APPS/etc/opkg/beta-optware.conf.new
  sed -i -e 's|armv7l|armv7|g' $APPS/etc/opkg/beta-optware.conf.new
  sed -i -e 's|armv6l|armv6|g' $APPS/etc/opkg/beta-optware.conf.new

  # Install beta apps feeds
  echo "src/gz beta-apps http://ipkg.preware.net/beta/apps/all" > $APPS/etc/opkg/beta-apps.conf.new
  echo "src/gz beta-apps-`/bin/uname -m` http://ipkg.preware.net/beta/apps/`/bin/uname -m`" >> $APPS/etc/opkg/beta-apps.conf.new
  sed -i -e 's|armv7l|armv7|g' $APPS/etc/opkg/beta-apps.conf.new
  sed -i -e 's|armv6l|armv6|g' $APPS/etc/opkg/beta-apps.conf.new

  # Install beta patches feed
  echo "src/gz beta-patches http://ipkg.preware.net/beta/patches/${VERSION:-unknown}" > $APPS/etc/opkg/beta-patches.conf.new

  # Install beta kernels feed
  #echo "src/gz beta-kernels http://ipkg.preware.net/beta/kernels/${VERSION:-unknown}" > $APPS/etc/opkg/beta-kernels.conf.new

  # Install beta woce feed
  echo "src/gz beta-woce http://ipkg.preware.net/beta/woce" > $APPS/etc/opkg/beta-woce.conf.new

  # Remove the old testing feeds
  rm -f $APPS/etc/opkg/webos-testing*.conf*
  rm -f $APPS/etc/opkg/optware-testing*.conf*
  rm -f $APPS/etc/opkg/webos-*-testing*.conf*

fi

# Retain disabled status of existing feeds
if [ "`ls $APPS/etc/opkg/*.disabled`" ] ; then
  for f in $APPS/etc/opkg/*.disabled ; do
    if [ -f $APPS/etc/opkg/`basename $f .disabled` ] ; then
      rm -f $f
      mv $APPS/etc/opkg/`basename $f .disabled` $f
    fi
  done
fi

# Assert disabled status of new feeds
if [ "`ls $APPS/etc/opkg/*.new`" ] ; then
  for f in $APPS/etc/opkg/*.new ; do
    if [ -f $APPS/etc/opkg/`basename $f .new` ] ; then
      rm -f $APPS/etc/opkg/`basename $f .new`
      mv $f $APPS/etc/opkg/`basename $f .new`
    else
      rm -f $APPS/etc/opkg/`basename $f .new`.disabled
      mv $f $APPS/etc/opkg/`basename $f .new`.disabled
    fi
  done
fi

exit 0
